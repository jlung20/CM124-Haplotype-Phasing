import numpy as np
import random
import csv
import sys
import math
from itertools import product

# expects a haplotype in the first of a list, i.e. ['1', '0', '1']
# returns the complementary haplotype, ['0', '1', '0']
def compl(haplotype):
	return ['0' if h == '1' else '1' for h in haplotype]

# takes as input the genotype, a list, like ['1', '0', '0', '2', '1', '1'] and a
# permutation like ['0', '0', '1'], of length equal to the number of heterozygous
# alleles in the genotype and returns the corresponding haplotype in which
# 0's remain, 1's are mapped to 0's or 1's depending on the corresponding entry
# in the permutation and 2's are mapped to 1's
def gen_hapl(geno, perm):
	pidx = 0
	glen = len(geno)
	hapl = []
	for ii in range(glen):
		if geno[ii] == '0':
			hapl.append('0')
		elif geno[ii] == '2':
			hapl.append('1')
		else:
			hapl.append(perm[pidx])
			pidx += 1
	return hapl

# now that I can generate all the possible haplotypes, I need to do a

# current set of tuning parameters and global variables is below
step = 20
# options currently just include "EM" but will be extended later on
method = "EM"
outfile = ""
#genos = [['0', '2', '2', '1', '0', '0', '1', '2', '1', '0', '2', '1', '2', '1', '0', '2'], ['0', '2', '2', '1', '0', '1', '1', '1', '0', '0', '2', '0', '1', '1', '1', '1'], ['0', '2', '2', '0', '0', '0', '2', '0', '1', '0', '2', '1', '2', '1', '0', '2'], ['0', '1', '1', '1', '0', '2', '1', '1', '2', '0', '2', '2', '1', '2', '2', '1'], ['0', '2', '1', '0', '0', '1', '1', '1', '1', '0', '2', '1', '1', '1', '1', '2'], ['0', '0', '2', '0', '0', '2', '0', '0', '2', '0', '2', '2', '1', '2', '1', '1'], ['0', '1', '0', '1', '0', '0', '2', '0', '1', '1', '2', '1', '2', '1', '0', '2'], ['0', '2', '2', '2', '0', '1', '0', '1', '2', '0', '2', '1', '2', '1', '0', '2'], ['0', '1', '1', '1', '0', '0', '2', '0', '0', '0', '2', '0', '2', '0', '0', '2'], ['0', '1', '1', '2', '0', '1', '2', '2', '2', '0', '2', '2', '1', '2', '1', '1'], ['0', '2', '1', '1', '0', '0', '2', '1', '2', '0', '2', '1', '1', '1', '0', '2'], ['1', '2', '2', '1', '0', '0', '2', '1', '0', '0', '2', '1', '2', '1', '0', '2'], ['0', '1', '1', '2', '0', '0', '2', '2', '1', '0', '2', '2', '2', '1', '1', '1'], ['0', '2', '2', '0', '0', '0', '2', '0', '0', '0', '2', '2', '1', '2', '1', '1'], ['1', '1', '1', '1', '0', '0', '2', '1', '0', '0', '2', '1', '2', '1', '0', '2'], ['0', '1', '1', '1', '0', '1', '1', '1', '1', '0', '2', '2', '1', '1', '1', '1'], ['0', '1', '1', '1', '0', '1', '2', '0', '1', '0', '2', '0', '2', '0', '0', '1'], ['0', '0', '2', '0', '0', '1', '1', '0', '1', '1', '2', '2', '1', '2', '1', '1'], ['0', '1', '1', '0', '0', '0', '2', '0', '1', '0', '2', '1', '1', '1', '1', '1'], ['0', '1', '1', '2', '0', '0', '2', '1', '0', '0', '2', '1', '2', '0', '0', '2'], ['0', '1', '2', '1', '0', '0', '2', '0', '0', '0', '2', '0', '2', '0', '0', '2'], ['0', '1', '1', '0', '0', '1', '1', '0', '1', '0', '2', '1', '1', '1', '1', '2'], ['0', '2', '1', '2', '0', '1', '2', '2', '1', '0', '2', '2', '2', '1', '1', '1'], \
#		['0', '2', '2', '1', '0', '0', '1', '2', '1', '0', '2', '1', '2', '1', '0', '2'], ['0', '2', '2', '1', '0', '0', '2', '1', '1', '0', '2', '1', '1', '1', '1', '1'], ['0', '1', '2', '1', '0', '0', '2', '0', '0', '0', '2', '0', '2', '0', '0', '2'], ['0', '1', '1', '2', '0', '0', '2', '1', '1', '0', '2', '1', '1', '1', '0', '2'], ['0', '2', '2', '1', '0', '1', '2', '1', '1', '1', '2', '1', '2', '1', '1', '1'], ['0', '0', '1', '2', '0', '0', '1', '1', '2', '0', '2', '2', '0', '2', '1', '1'], ['0', '0', '1', '0', '0', '1', '1', '0', '2', '1', '2', '1', '1', '1', '1', '1'], ['0', '2', '2', '0', '0', '0', '2', '0', '0', '0', '2', '0', '2', '0', '0', '2'], ['0', '1', '1', '1', '0', '0', '2', '1', '0', '0', '2', '2', '1', '2', '1', '1'], ['0', '2', '2', '1', '0', '1', '2', '2', '1', '0', '2', '1', '2', '1', '1', '1'], ['0', '1', '2', '0', '0', '0', '2', '1', '0', '0', '2', '0', '2', '0', '0', '2'], ['0', '2', '2', '1', '0', '0', '2', '2', '0', '0', '1', '0', '2', '0', '0', '2'], ['0', '2', '2', '0', '0', '0', '2', '1', '0', '0', '2', '0', '2', '0', '0', '2'], ['0', '2', '2', '2', '0', '2', '1', '1', '2', '0', '2', '2', '1', '2', '2', '0'], ['0', '1', '2', '1', '0', '0', '2', '0', '1', '0', '2', '1', '1', '1', '1', '1'], ['0', '1', '1', '1', '0', '1', '1', '0', '1', '0', '2', '2', '0', '2', '2', '0'], ['0', '2', '2', '0', '0', '0', '2', '0', '1', '0', '2', '0', '2', '0', '0', '2'], ['0', '0', '1', '1', '0', '0', '2', '1', '1', '0', '2', '1', '1', '1', '0', '2'], ['0', '2', '2', '0', '0', '1', '2', '0', '1', '0', '2', '0', '2', '0', '0', '2'], ['0', '2', '2', '2', '0', '2', '1', '1', '2', '0', '2', '2', '1', '2', '2', '0'], ['0', '1', '1', '2', '0', '0', '2', '1', '1', '0', '2', '2', '0', '2', '0', '2'], ['0', '1', '2', '0', '0', '1', '1', '1', '2', '0', '2', '1', '1', '1', '1', '1'], ['0', '2', '2', '0', '0', '1', '1', '0', '2', '0', '2', '1', '2', '1', '0', '2'], ['0', '1', '1', '1', '0', '0', '2', '1', '0', '0', '2', '1', '2', '1', '0', '2'], ['0', '1', '0', '1', '0', '0', '2', '2', '0', '0', '2', '2', '1', '1', '0', '2'], ['0', '2', '2', '1', '0', '0', '1', '2', '1', '0', '2', '1', '2', '1', '0', '2'], ['0', '1', '1', '1', '0', '0', '2', '1', '1', '0', '2', '1', '1', '1', '0', '2']]
geno = ['0', '1', '1', '1', '0', '0', '2', '1', '1', '0', '2', '1', '1', '1', '0', '2']
haplo_temp = []
hetero_cnt = geno.count('1')
haps = set()
ii = 0
#for jj in range(hetero_cnt):
#	permute_list = ['1' for ii in range(hetero_cnt - jj)] + ['0' for ii in range(jj)]
	#print(permute_list)
#glen = len(genos)

for p in product(['0','1'], repeat=hetero_cnt):
	# because we've been constructing the complement as well, by the time this
	# condition is satisfied, we will have examined all unique pairs of haplotypes
	if p[0] == "1":
		break
	hapl = gen_hapl(geno, p)
	c_hapl = gen_hapl(geno, compl(p))
	haplo_temp.append((hapl, c_hapl))
	ii += 1
print(haplo_temp[-1])
print(geno)
print(hetero_cnt)

